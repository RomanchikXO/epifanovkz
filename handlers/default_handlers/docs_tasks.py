import io
from loader import bot
from telebot.types import Message
from states.person_info import UserInfoState
from keyboards.reply.time_buttons import *
from database.DataBase import User, Tasks
from datetime import date, timedelta


def generate_tasks_report(days: int, chat_id: int, caption: str, visible_file_name: str) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.

    :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
    :type days: int

    :param chat_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    :type chat_id: int

    :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    :type caption: str

    :param visible_file_name: –ò–º—è —Ñ–∞–π–ª–∞, –≤–∏–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type visible_file_name: str

    :return: None
    :rtype: None
    """
    start_date = date.today() - timedelta(days=days)
    end_date = date.today()
    tasks_last_week = Tasks.select().where((Tasks.date >= start_date) & (Tasks.date <= end_date)).execute()

    file_content = '\n'.join(
        f"{i_task.name_patient} - {i_task.task} - {i_task.date} - {i_task.comment_if_done}\n" for i_task in
        tasks_last_week)

    with io.BytesIO() as file:
        file.write(file_content.encode())
        file.seek(0)

        bot.send_document(
            chat_id=chat_id,
            document=file,
            caption=caption,
            visible_file_name=visible_file_name
        )


@bot.message_handler(state=UserInfoState.change_period,
                     func=lambda message: message.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
def time_interval(message: Message) -> None:
    bot.set_state(message.from_user.id, UserInfoState.get_data)
    change_keyboard = week_month_change()
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup=change_keyboard)


@bot.message_handler(state=UserInfoState.get_data,
                     func=lambda message: message.text in ["–ù–µ–¥–µ–ª—èüîΩ", "–ú–µ—Å—è—ÜüîΩ", "–í–≤–æ–¥ –¥–∞—Ç—ã"])
def fetch_patient_data(message: Message) -> None:
    if message.text == "–ù–µ–¥–µ–ª—èüîΩ":
        generate_tasks_report(
            days=7,
            chat_id = message.from_user.id,
            caption = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
            visible_file_name="–ó–∞–¥–∞—á–∏_–Ω–µ–¥–µ–ª—è.txt"
        )
    elif message.text == "–ú–µ—Å—è—ÜüîΩ":
        generate_tasks_report(
            days=30,
            chat_id=message.from_user.id,
            caption="–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            visible_file_name="–ó–∞–¥–∞—á–∏_–º–µ—Å—è—Ü.txt"
        )
    elif message.text == "–í–≤–æ–¥ –¥–∞—Ç—ã":
        bot.send_message(message.from_user.id, "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")