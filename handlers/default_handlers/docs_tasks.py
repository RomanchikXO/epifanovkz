import io
from loader import bot

from states.person_info import UserInfoState

from keyboards.reply.time_buttons import *
from keyboards.inline.completed_or_not import *

from database.DataBase import Tasks
from datetime import date, timedelta
from keyboards.reply.buttoms import select_an_action

from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from telebot.types import Message

import datetime

def generate_tasks_report(days: int, chat_id: int, caption: str, visible_file_name: str) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.

    :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
    :type days: int

    :param chat_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    :type chat_id: int

    :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    :type caption: str

    :param visible_file_name: –ò–º—è —Ñ–∞–π–ª–∞, –≤–∏–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type visible_file_name: str

    :return: None
    :rtype: None
    """
    start_date = date.today() - timedelta(days=days)
    end_date = date.today()
    tasks_last_week = Tasks.select().where((Tasks.date >= start_date) & (Tasks.date <= end_date)).order_by(Tasks.date.desc())

    if tasks_last_week:
        file_content = '\n'.join(
            f"–í—Ä–∞—á:{i_task.doc}\n–ü–∞—Ü–∏–µ–Ω—Ç:{i_task.name_patient}\n–ó–∞–¥–∞—á–∞:{i_task.task}\n–î–∞—Ç–∞:{i_task.date}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{i_task.comment_if_done}\n" for i_task in
            tasks_last_week)

        with io.BytesIO() as file:
            file.write(file_content.encode())
            file.seek(0)

            bot.send_document(
                chat_id=chat_id,
                document=file,
                caption=caption,
                visible_file_name=visible_file_name
            )
    else:
        bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

@bot.message_handler(state=UserInfoState.change_period,
                     func=lambda message: message.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
def time_interval(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–ú–æ–∏ –∑–∞–¥–∞—á–∏" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UserInfoState.get_data.
    –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type message: Message
    :return: None
    """
    bot.set_state(message.from_user.id, UserInfoState.get_data)
    change_keyboard = week_month_change()
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup=change_keyboard)


@bot.message_handler(state=UserInfoState.get_data,
                     func=lambda message: message.text in ["–ù–µ–¥–µ–ª—èüîΩ", "–ú–µ—Å—è—ÜüîΩ", "–í–≤–æ–¥ –¥–∞—Ç—ã", "–ù–∞–∑–∞–¥üîô"])
def fetch_patient_data(message: Message) -> None:
    if message.text == "–ù–µ–¥–µ–ª—èüîΩ":
        generate_tasks_report(
            days=7,
            chat_id=message.from_user.id,
            caption="–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
            visible_file_name="–ó–∞–¥–∞—á–∏_–Ω–µ–¥–µ–ª—è.txt"
        )
    elif message.text == "–ú–µ—Å—è—ÜüîΩ":
        generate_tasks_report(
            days=30,
            chat_id=message.from_user.id,
            caption="–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            visible_file_name="–ó–∞–¥–∞—á–∏_–º–µ—Å—è—Ü.txt"
        )
    elif message.text == "–í–≤–æ–¥ –¥–∞—Ç—ã":
        bot.set_state(message.from_user.id, UserInfoState.get_date, message.chat.id)
        date_input(message)
    elif message.text == "–ù–∞–∑–∞–¥üîô":
        bot.set_state(message.from_user.id, UserInfoState.add_info, message.chat.id)
        change_keyboard = select_an_action("docs")
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É", reply_markup=change_keyboard)


@bot.message_handler(state=UserInfoState.get_date)
def date_input(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    calendar, step = DetailedTelegramCalendar(calendar_id=1, locale='ru', min_date=datetime.date.today()).build()
    bot.send_message(message.chat.id,
                     f"Select {LSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def cal(call):
    result, key, step = DetailedTelegramCalendar(calendar_id=1, locale='ru', min_date=datetime.date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        tasks_in_result = Tasks.select().where(Tasks.date == result).execute()
        with bot.retrieve_data(call.from_user.id) as data:
            data['date_task'] = result
        bot.set_state(call.from_user.id, UserInfoState.get_data)
        if tasks_in_result:
            for i_task in tasks_in_result:
                button = done_for_task(i_task.name_patient)
                bot.send_message(call.from_user.id, f'–í—Ä–∞—á: {i_task.doc}\n'
                                                    f'–ü–∞—Ü–∏–µ–Ω—Ç: {i_task.name_patient} \n'
                                                    f'–ó–∞–¥–∞—á–∞: {i_task.task} \n'
                                                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {i_task.comment_if_done}',
                                 reply_markup=button)

        else:
            bot.send_message(call.from_user.id, '–ó–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç')

